using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using Jose;
using log4net;
using MiNET.Net;
using MiNET.Utils;
using Newtonsoft.Json.Linq;

namespace MiNET
{
	public class LoginMessageHandler : IMcpeMessageHandler
	{
		private static readonly ILog Log = LogManager.GetLogger(typeof (LoginMessageHandler));

		private readonly PlayerNetworkSession _session;

		private object _loginSyncLock = new object();
		private PlayerInfo _playerInfo;

		public LoginMessageHandler(PlayerNetworkSession session)
		{
			_session = session;
		}

		public void Disconnect(string reason, bool sendDisconnect = true)
		{
		}

		public virtual void HandleMcpeLogin(McpeLogin message)
		{
			//Disconnect("Este servidor ya no existe. Por favor, conecta a " + ChatColors.Aqua + "play.bladestorm.net" + ChatColors.White + " para seguir jugando.");
			////Disconnect("This server is closed. Please connect to " + ChatColors.Aqua + "play.bladestorm.net" + ChatColors.White + " to continue playing.");
			//return;

			// Only one login!
			lock (_loginSyncLock)
			{
				if (_session.Username != null)
				{
					Log.Info($"Player {_session.Username} doing multiple logins");
					return; // Already doing login
				}

				_session.Username = string.Empty;
			}

			if (message.protocolVersion < 100)
			{
				Log.Warn($"Wrong version ({message.protocolVersion}) of Minecraft Pocket Edition, client need an upgrade.");
				_session.Disconnect($"Wrong version ({message.protocolVersion}) of Minecraft Pocket Edition, please upgrade.");
				return;
			}

			// THIS counter exist to protect the level from being swamped with player list add
			// attempts during startup (normally).

			DecodeCert(message);

			//if (!message.username.Equals("gurun") && !message.username.Equals("TruDan") && !message.username.Equals("Morehs"))
			//{
			//	if (serverInfo.NumberOfPlayers > serverInfo.MaxNumberOfPlayers)
			//	{
			//		Disconnect("Too many players (" + serverInfo.NumberOfPlayers + ") at this time, please try again.");
			//		return;
			//	}

			//	// Use for loadbalance only right now.
			//	if (serverInfo.ConnectionsInConnectPhase > serverInfo.MaxNumberOfConcurrentConnects)
			//	{
			//		Disconnect("Too many concurrent logins (" + serverInfo.ConnectionsInConnectPhase + "), please try again.");
			//		return;
			//	}
			//}

			//if (message.username == null || message.username.Trim().Length == 0 || !Regex.IsMatch(message.username, "^[A-Za-z0-9_-]{3,56}$"))
			//{
			//	Disconnect("Invalid username.");
			//	return;
			//}

			////string fileName = Path.GetTempPath() + "Skin_" + Skin.SkinType + ".png";
			////Log.Info($"Writing skin to filename: {fileName}");
			////Skin.SaveTextureToFile(fileName, Skin.Texture);
		}

		protected void DecodeCert(McpeLogin message)
		{
			_playerInfo = new PlayerInfo();

			// Get bytes
			byte[] buffer = message.payload;

			//Log.Debug($"Unknown byte in login packet is: {message.unknown}");

			if (message.payload.Length != buffer.Length)
			{
				Log.Debug($"Wrong lenght {message.payload.Length} != {message.payload.Length}");
				throw new Exception($"Wrong lenght {message.payload.Length} != {message.payload.Length}");
			}
			// Decompress bytes

			Log.Debug("Lenght: " + message.payload.Length + ", Message: " + Convert.ToBase64String(buffer));

			MemoryStream stream = new MemoryStream(buffer);
			if (stream.ReadByte() != 0x78)
			{
				throw new InvalidDataException("Incorrect ZLib header. Expected 0x78 0x9C");
			}
			stream.ReadByte();

			string certificateChain;
			string skinData;

			using (var defStream2 = new DeflateStream(stream, CompressionMode.Decompress, false))
			{
				// Get actual package out of bytes
				MemoryStream destination = MiNetServer.MemoryStreamManager.GetStream();
				defStream2.CopyTo(destination);
				destination.Position = 0;
				fNbt.NbtBinaryReader reader = new fNbt.NbtBinaryReader(destination, false);

				try
				{
					var countCertData = reader.ReadInt32();
					Log.Debug("Count cert: " + countCertData);
					certificateChain = Encoding.UTF8.GetString(reader.ReadBytes(countCertData));
					Log.Debug("Decompressed certificateChain " + certificateChain);

					var countSkinData = reader.ReadInt32();
					Log.Debug("Count skin: " + countSkinData);
					skinData = Encoding.UTF8.GetString(reader.ReadBytes(countSkinData));
					Log.Debug("Decompressed skinData" + skinData);
				}
				catch (Exception e)
				{
					Log.Error("Parsing login", e);
					return;
				}
			}


			try
			{
				{
					if (Log.IsDebugEnabled) Log.Debug("Input JSON string: " + certificateChain);

					dynamic json = JObject.Parse(certificateChain);

					if (Log.IsDebugEnabled) Log.Debug($"JSON:\n{json}");

					string validationKey = null;
					foreach (dynamic o in json.chain)
					{
						IDictionary<string, dynamic> headers = JWT.Headers(o.ToString());

						if (Log.IsDebugEnabled)
						{
							Log.Debug("Raw chain element:\n" + o.ToString());
							Log.Debug($"JWT Header: {string.Join(";", headers)}");

							dynamic jsonPayload = JObject.Parse(JWT.Payload(o.ToString()));
							Log.Debug($"JWT Payload:\n{jsonPayload}");
						}

						// x5u cert (string): MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAE8ELkixyLcwlZryUQcu1TvPOmI2B7vX83ndnWRUaXm74wFfa5f/lwQNTfrLVHa2PmenpGI6JhIMUJaWZrjmMj90NoKNFSNBuKdm8rYiXsfaz3K36x/1U26HpG0ZxK/V1V
						if (headers.ContainsKey("x5u"))
						{
							string certString = headers["x5u"];

							if (Log.IsDebugEnabled)
							{
								Log.Debug($"x5u cert (string): {certString}");
								ECDiffieHellmanPublicKey publicKey = CryptoUtils.CreateEcDiffieHellmanPublicKey(certString);
								Log.Debug($"Cert:\n{publicKey.ToXmlString()}");
							}

							// Validate
							CngKey newKey = CryptoUtils.ImportECDsaCngKeyFromString(certString);
							CertificateData data = JWT.Decode<CertificateData>(o.ToString(), newKey);

							if (data != null)
							{
								if (Log.IsDebugEnabled) Log.Debug("Decoded token success");

								if (CertificateData.MojangRootKey.Equals(certString, StringComparison.InvariantCultureIgnoreCase))
								{
									Log.Debug("Got Mojang key. Is valid = " + data.CertificateAuthority);
									validationKey = data.IdentityPublicKey;
								}
								else if (validationKey != null && validationKey.Equals(certString, StringComparison.InvariantCultureIgnoreCase))
								{
									_playerInfo.CertificateData = data;
								}
								else
								{
									if (data.ExtraData == null) continue;

									// Self signed, make sure they don't fake XUID
									if (data.ExtraData.Xuid != null)
									{
										Log.Warn("Received fake XUID from " + data.ExtraData.DisplayName);
										data.ExtraData.Xuid = null;
									}

									_playerInfo.CertificateData = data;
								}
							}
							else
							{
								Log.Error("Not a valid Identity Public Key for decoding");
							}
						}
					}

					//TODO: Implement disconnect here

					{
						_playerInfo.Username = _playerInfo.CertificateData.ExtraData.DisplayName;
						_session.Username = _playerInfo.Username;
						string identity = _playerInfo.CertificateData.ExtraData.Identity;

						if (Log.IsDebugEnabled) Log.Debug($"Connecting user {_playerInfo.Username} with identity={identity}");
						_playerInfo.ClientUuid = new UUID(new Guid(identity));

						_session.CryptoContext = new CryptoContext
						{
							UseEncryption = Config.GetProperty("UseEncryptionForAll", false) || (Config.GetProperty("UseEncryption", true) && !string.IsNullOrWhiteSpace(_playerInfo.CertificateData.ExtraData.Xuid)),
						};

						if (_session.CryptoContext.UseEncryption)
						{
							ECDiffieHellmanPublicKey publicKey = CryptoUtils.CreateEcDiffieHellmanPublicKey(_playerInfo.CertificateData.IdentityPublicKey);
							if (Log.IsDebugEnabled) Log.Debug($"Cert:\n{publicKey.ToXmlString()}");

							// Create shared shared secret
							ECDiffieHellmanCng ecKey = new ECDiffieHellmanCng(384);
							ecKey.HashAlgorithm = CngAlgorithm.Sha256;
							ecKey.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash;
							ecKey.SecretPrepend = Encoding.UTF8.GetBytes("RANDOM SECRET"); // Server token

							byte[] secret = ecKey.DeriveKeyMaterial(publicKey);

							if (Log.IsDebugEnabled) Log.Debug($"SECRET KEY (b64):\n{Convert.ToBase64String(secret)}");

							{
								RijndaelManaged rijAlg = new RijndaelManaged
								{
									BlockSize = 128,
									Padding = PaddingMode.None,
									Mode = CipherMode.CFB,
									FeedbackSize = 8,
									Key = secret,
									IV = secret.Take(16).ToArray(),
								};

								// Create a decrytor to perform the stream transform.
								ICryptoTransform decryptor = rijAlg.CreateDecryptor(rijAlg.Key, rijAlg.IV);
								MemoryStream inputStream = new MemoryStream();
								CryptoStream cryptoStreamIn = new CryptoStream(inputStream, decryptor, CryptoStreamMode.Read);

								ICryptoTransform encryptor = rijAlg.CreateEncryptor(rijAlg.Key, rijAlg.IV);
								MemoryStream outputStream = new MemoryStream();
								CryptoStream cryptoStreamOut = new CryptoStream(outputStream, encryptor, CryptoStreamMode.Write);

								_session.CryptoContext.Algorithm = rijAlg;
								_session.CryptoContext.Decryptor = decryptor;
								_session.CryptoContext.Encryptor = encryptor;
								_session.CryptoContext.InputStream = inputStream;
								_session.CryptoContext.OutputStream = outputStream;
								_session.CryptoContext.CryptoStreamIn = cryptoStreamIn;
								_session.CryptoContext.CryptoStreamOut = cryptoStreamOut;
							}

							var response = McpeServerExchange.CreateObject();
							response.NoBatch = true;
							response.ForceClear = true;
							response.serverPublicKey = Convert.ToBase64String(ecKey.PublicKey.GetDerEncoded());
							response.tokenLength = (short) ecKey.SecretPrepend.Length;
							response.token = ecKey.SecretPrepend;

							_session.SendPackage(response);

							if (Log.IsDebugEnabled) Log.Warn($"Encryption enabled for {_session.Username}");
						}
					}
				}

				{
					if (Log.IsDebugEnabled) Log.Debug("Input SKIN string: " + skinData);

					IDictionary<string, dynamic> headers = JWT.Headers(skinData);
					dynamic payload = JObject.Parse(JWT.Payload(skinData));

					if (Log.IsDebugEnabled) Log.Debug($"Skin JWT Header: {string.Join(";", headers)}");
					if (Log.IsDebugEnabled) Log.Debug($"Skin JWT Payload:\n{payload.ToString()}");

					// Skin JWT Payload: 
					//{
					// "ClientRandomId": -1256727416,
					// "ServerAddress": "yodamine.com:19132",
					// "SkinData": "",
					// "SkinId": "Standard_Custom"
					//}

					_playerInfo.ServerAddress = payload.ServerAddress;
					_playerInfo.ClientId = payload.ClientRandomId;

					_playerInfo.Skin = new Skin()
					{
						SkinType = payload.SkinId,
						Texture = Convert.FromBase64String((string) payload.SkinData),
					};
				}

				if (!_session.CryptoContext.UseEncryption)
				{
					_session.MessageHandler.HandleMcpeClientMagic(null);
				}
			}
			catch (Exception e)
			{
				Log.Error("Decrypt", e);
			}
		}

		public void HandleMcpeClientMagic(McpeClientMagic message)
		{
			IServerManager serverManager = _session.Server.ServerManager;
			IServer server = serverManager.GetServer();

			IMcpeMessageHandler messageHandler = server.CreatePlayer(_session, _playerInfo);
			_session.MessageHandler = messageHandler; // Replace current message handler with real one.

			_session.MessageHandler.HandleMcpeClientMagic(null);
		}

		public void HandleMcpeResourcePackClientResponse(McpeResourcePackClientResponse message)
		{
		}

		public void HandleMcpeText(McpeText message)
		{
		}

		public void HandleMcpeMovePlayer(McpeMovePlayer message)
		{
		}

		public void HandleMcpeRemoveBlock(McpeRemoveBlock message)
		{
		}

		public void HandleMcpeEntityEvent(McpeEntityEvent message)
		{
		}

		public void HandleMcpeMobEquipment(McpeMobEquipment message)
		{
		}

		public void HandleMcpeMobArmorEquipment(McpeMobArmorEquipment message)
		{
		}

		public void HandleMcpeInteract(McpeInteract message)
		{
		}

		public void HandleMcpeUseItem(McpeUseItem message)
		{
		}

		public void HandleMcpePlayerAction(McpePlayerAction message)
		{
		}

		public void HandleMcpePlayerFall(McpePlayerFall message)
		{
		}

		public void HandleMcpeAnimate(McpeAnimate message)
		{
		}

		public void HandleMcpeRespawn(McpeRespawn message)
		{
		}

		public void HandleMcpeDropItem(McpeDropItem message)
		{
		}

		public void HandleMcpeContainerClose(McpeContainerClose message)
		{
		}

		public void HandleMcpeContainerSetSlot(McpeContainerSetSlot message)
		{
		}

		public void HandleMcpeCraftingEvent(McpeCraftingEvent message)
		{
		}

		public void HandleMcpeBlockEntityData(McpeBlockEntityData message)
		{
		}

		public void HandleMcpePlayerInput(McpePlayerInput message)
		{
		}

		public void HandleMcpeMapInfoRequest(McpeMapInfoRequest message)
		{
		}

		public void HandleMcpeRequestChunkRadius(McpeRequestChunkRadius message)
		{
		}

		public void HandleMcpeItemFramDropItem(McpeItemFramDropItem message)
		{
		}

		public void HandleMcpeCommandStep(McpeCommandStep message)
		{
		}

		public void HandleMcpeResourcePackChunkRequest(McpeResourcePackChunkRequest message)
		{
		}
	}

	public interface IServerManager
	{
		IServer GetServer();
	}

	public interface IServer
	{
		IMcpeMessageHandler CreatePlayer(INetworkHandler session, PlayerInfo playerInfo);
	}

	public class DefualtServerManager: IServerManager
	{
		private readonly MiNetServer _miNetServer;
		private IServer _getServer;

		protected DefualtServerManager()
		{
			
		}

		public DefualtServerManager(MiNetServer miNetServer)
		{
			_miNetServer = miNetServer;
			_getServer = new DefaultServer(miNetServer);
		}

		public virtual IServer GetServer()
		{
			return _getServer;
		}
	}

	public class DefaultServer: IServer
	{
		private readonly MiNetServer _server;

		protected DefaultServer()
		{
		}

		public DefaultServer(MiNetServer server)
		{
			_server = server;
		}

		public virtual IMcpeMessageHandler CreatePlayer(INetworkHandler session, PlayerInfo playerInfo)
		{
			Player player = _server.PlayerFactory.CreatePlayer(_server, session.GetClientEndPoint());
			player.NetworkHandler = session;
			player.CertificateData = playerInfo.CertificateData;
			player.Username = playerInfo.Username;
			player.ClientUuid = playerInfo.ClientUuid;
			player.ServerAddress = playerInfo.ServerAddress;
			player.ClientId = playerInfo.ClientId;
			player.Skin = playerInfo.Skin;

			return player;
		}
	}
}